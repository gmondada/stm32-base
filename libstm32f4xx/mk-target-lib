#!/bin/bash

#
# Ce script génère la librarie de base pour le stm32f4discovery.
# Cette librarie contient:
# - bootstrap en assembleur
# - le code d'initialisation de la PLL du clock
# - la libraries StdPeriph de ST
# - la libraries de ARM (core)
#

case $0 in
/*)     D=`dirname $0`;;
*/*)    D=$PWD/`dirname $0`;;
*)      D=$PWD;;
esac

set -e


TOOLPREFIX=~/big/stm32f4/toolchain/bin/
CC=${TOOLPREFIX}arm-none-eabi-gcc
AR=${TOOLPREFIX}arm-none-eabi-ar
RANLIB=${TOOLPREFIX}arm-none-eabi-ranlib
CFLAGS="-mlittle-endian -mthumb -mthumb-interwork -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard -Wdouble-promotion"
TARGET=~/big/stm32f4/target/stm32f4discovery
PKG=stm32f4_dsp_stdperiph_lib.zip
PKG_DIR=STM32F4xx_DSP_StdPeriph_Lib_V1.6.1

BUILD=/tmp/__build

mkdir -p $TARGET/lib
mkdir -p $TARGET/include
mkdir -p $BUILD
cd $BUILD

rm -rf $PKG_DIR
unzip $D/$PKG
cd $PKG_DIR

# remove modules that are not for this target

rm -f Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fmc.h
rm -f Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmc.c

# create system file from template

DEVSRC=$(pwd)/Libraries/CMSIS/Device/ST/STM32F4xx/Source
DEVINC=$(pwd)/Libraries/CMSIS/Device/ST/STM32F4xx/Include

LC_ALL=C sed "s/#define.*PLL_M.*25/#define PLL_M 8/g" $DEVSRC/Templates/system_stm32f4xx.c >$DEVSRC/system_stm32f4xx.c

rm -f $DEVSRC/Templates/system_stm32f4xx.c

# collect all source and include files

SRC=$(pwd)/Libraries/STM32F4xx_StdPeriph_Driver/src
INC=$(pwd)/Libraries/STM32F4xx_StdPeriph_Driver/inc
#CORESRC=$(pwd)/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates
COREINC=$(pwd)/Libraries/CMSIS/Include

STARTUP=$(pwd)/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc_ride7/startup_stm32f40xx.s

SRCFILES="$(find $SRC -name '*.c') $(find $DEVSRC -name '*.c')" # $(find $CORESRC -name '*.c')"
INCFILES="$(find $INC -name '*.h') $(find $DEVINC -name '*.h')"

# build library

CFLAGS2="-DHSE_VALUE=((uint32_t)8000000) -DSTM32F40_41xxx -Dassert_param(expr)=((void)0)"

rm -rf __obj 2>/dev/null
mkdir -p __obj
cd __obj || exit 1
for fn in $SRCFILES; do
	echo CC $fn
	$CC -c $fn -I $INC -I $DEVINC -I $COREINC $CFLAGS $CFLAGS2
done
echo CC $STARTUP
$CC -c $STARTUP

OBJFILES=$(find $(pwd) -name '*.o')
if [ -e libstm32f4xx.a ]; then
	rm libstm32f4xx.a
fi
$AR -r libstm32f4xx.a $OBJFILES
$RANLIB libstm32f4xx.a

# create a single header file including everything

echo '// generated by GMO' > all.h
echo '#ifndef _STM32F4XX_H_GMO_' >> all.h
echo '#define _STM32F4XX_H_GMO_' >> all.h
echo '#define HSE_VALUE ((uint32_t)8000000)' >> all.h
echo '#define STM32F40_41xxx' >> all.h
echo '#define assert_param(expr) ((void)0)' >> all.h
echo '#include "stm32f4xx_original.h"' >> all.h
for fn in $INCFILES; do
	echo '#include "'$(basename $fn)'"' >> all.h
done
echo '#endif' >> all.h

# create Makefile

cat > gcc_conf.makefile <<-EOF
TOOLPREFIX=${TOOLPREFIX}
CC=\${TOOLPREFIX}arm-none-eabi-gcc
OBJCOPY=\${TOOLPREFIX}arm-none-eabi-objcopy
SIZE=\${TOOLPREFIX}arm-none-eabi-size
AR=\${TOOLPREFIX}arm-none-eabi-ar

CFLAGS += -I$TARGET/include
CFLAGS += $CFLAGS

LDFLAGS += $CFLAGS -nostartfiles
LDFLAGS += -L$TARGET/lib
LDFLAGS += -lm -lstm32f4xx
EOF

# install library

mkdir -p $TARGET/include
cp $INCFILES $TARGET/include
cp $(find $COREINC -name '*.h') $TARGET/include
mv $TARGET/include/stm32f4xx.h $TARGET/include/stm32f4xx_original.h
ln -sf $TARGET/include/stm32f4xx.h $TARGET/include/stm32f4xx_conf.h
cp all.h $TARGET/include/stm32f4xx.h
cp libstm32f4xx.a $TARGET/lib
cp gcc_conf.makefile $TARGET
